// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
  }
%}

%% vs {

precision mediump float;
uniform mat4 cc_matViewProj;
attribute vec3 a_position;
#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif
attribute lowp vec4 a_color; // 颜色;
varying lowp vec4 v_color;

 void main () {
    vec4 pos = cc_matViewProj * vec4(a_position, 1);
    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif
    v_color = a_color;
    gl_Position = pos;
}

}

%% fs {

precision mediump float;
#if USE_TEXTURE
  uniform sampler2D texture;
  varying mediump vec2 v_uv0;
#endif
varying lowp vec4 v_color;
#define repeats 5.
uniform float num;

vec4 draw(vec2 uv) {
  return v_color * texture2D(texture,uv).rgba; 
}
float grid(float var, float size) {
  return floor(var*size)/size;
}
float rand(vec2 co){
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}
void main()
{
    vec4 blurred_image = vec4(0.);
    for (float i = 0.; i < repeats; i++) { 
    vec2 q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i,v_uv0.x+v_uv0.y))+num); 
    vec2 uv2 = v_uv0+(q*num);
    blurred_image += draw(uv2)/2.;
    q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i+2.,v_uv0.x+v_uv0.y+24.))+num); 
    uv2 = v_uv0+(q*num);
    blurred_image += draw(uv2)/2.;
    }
    blurred_image /= repeats;
    gl_FragColor = vec4(blurred_image);
}
}
